//deaflock avoidance alograthim
#include <stdio.h>

// Global variables for easier access in functions
int np, nr;
int alloc[10][10], max[10][10], need[10][10], aval[10];

// Function declarations
void disp(int arr[10][10]);
void calNeed();
void bankerAlog();

int main() {
    printf("Enter The Number Of Processes: ");
    scanf("%d", &np);
    printf("Enter The Number Of Resources: ");
    scanf("%d", &nr);

    // Allocation Matrix
    printf("Enter The Allocation Matrix:\n");
    for (int i = 0; i < np; i++) {
        for (int j = 0; j < nr; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    // Max Requirement Matrix
    printf("Enter The Max Requirements Matrix:\n");
    for (int i = 0; i < np; i++) {
        for (int j = 0; j < nr; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Available Resources
    printf("Enter The Available Resources:\n");
    for (int i = 0; i < nr; i++) {
        scanf("%d", &aval[i]);
    }

    printf("\nAllocation Matrix:\n");
    disp(alloc);
    printf("\nMaximum Requirements:\n");
    disp(max);
    printf("\nAvailable Resources:\n");
    for (int i = 0; i < nr; i++) {
        printf(" %d", aval[i]);
    }

    calNeed();
    printf("\nNeed Matrix:\n");
    disp(need);

    bankerAlog();

    return 0;
}

// Function to display a matrix
void disp(int arr[10][10]) {
    for (int i = 0; i < np; i++) {
        printf("\nP%d", i);
        for (int j = 0; j < nr; j++) {
            printf(" %d", arr[i][j]);
        }
    }
    printf("\n");
}

// Function to calculate the need matrix
void calNeed() {
    for (int i = 0; i < np; i++) {
        for (int j = 0; j < nr; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
}

// Banker's algorithm implementation
void bankerAlog() {
    int finish[10] = {0}, safeSeq[10];
    int work[10];
    for (int i = 0; i < nr; i++) {
        work[i] = aval[i];
    }

    int count = 0;
    while (count < np) {
        int found = 0;
        for (int p = 0; p < np; p++) {
            if (finish[p] == 0) {
                int j;
                for (j = 0; j < nr; j++) {
                    if (need[p][j] > work[j])
                        break;
                }

                if (j == nr) {
                    for (int k = 0; k < nr; k++)
                        work[k] += alloc[p][k];

                    safeSeq[count++] = p;
                    finish[p] = 1;
                    found = 1;
                }
            }
        }

        if (found == 0) {
            printf("\nThe system is in a deadlock.\n");
            return;
        }
    }

    printf("\nThe system is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < np; i++)
        printf("P%d ", safeSeq[i]);
    printf("\n");
}
